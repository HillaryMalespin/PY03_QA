/*
============================================================
üß™ DOCUMENTACI√ìN: Pruebas de gesti√≥n de Changesets (API v0.6)
------------------------------------------------------------
üìò Descripci√≥n:
Valida la manipulaci√≥n de changesets como unidad de trabajo
para agrupar ediciones dentro del sistema OpenStreetMap.

üéØ Objetivos espec√≠ficos:
- Comprobar apertura, edici√≥n continua, cierre y descarga sin errores.
- Confirmar que las discusiones asociadas a cambios est√°n disponibles.

‚úÖ Resultados esperados:
- Funcionamiento fluido, sin p√©rdida ni corrupci√≥n de datos.
- Sincronizaci√≥n correcta entre interfaces de usuario y API.
============================================================
*/

import { test, expect } from '@playwright/test';

test.describe('API OSM v0.6 - Pruebas en gesti√≥n de changesets', () => {

  const baseURL = 'https://api.openstreetmap.org/api/0.6';
  const token = 'TU_TOKEN_VALIDO_AQUI'; // ‚ö†Ô∏è Sustituir con tu token OAuth2 real

  // Variables para almacenar el ID del changeset abierto
  let changesetId;

  // ============================================================
  // 1Ô∏è‚É£ Apertura de changeset
  // ------------------------------------------------------------
  // Crea un nuevo changeset con un comentario simple.
  // ============================================================
  test('Abrir un nuevo changeset', async ({ request }) => {
    const changesetXML = `
      <osm>
        <changeset>
          <tag k="created_by" v="Playwright API Test"/>
          <tag k="comment" v="Prueba de apertura de changeset automatizada"/>
        </changeset>
      </osm>`;

    const response = await request.put(`${baseURL}/changeset/create`, {
      data: changesetXML,
      headers: {
        'Authorization': `Bearer ${token}`,
        'Content-Type': 'text/xml'
      }
    });

    // Se espera un 200 si el token es v√°lido
    expect([200, 401]).toContain(response.status());

    if (response.status() === 200) {
      changesetId = await response.text();
      console.log(`‚úÖ Changeset abierto con ID: ${changesetId}`);
    } else {
      console.warn('‚ö†Ô∏è No se pudo abrir el changeset (token inv√°lido o expirado)');
    }
  });

  // ============================================================
  // 2Ô∏è‚É£ Simulaci√≥n de edici√≥n continua dentro del changeset
  // ------------------------------------------------------------
  // Intenta realizar una edici√≥n dentro del changeset abierto.
  // ============================================================
  test('Edici√≥n continua en changeset abierto', async ({ request }) => {
    test.skip(!changesetId, 'No se abri√≥ ning√∫n changeset previamente.');

    const nodeXML = `
      <osm>
        <node changeset="${changesetId}" lat="10.0" lon="-84.0" />
      </osm>`;

    const response = await request.put(`${baseURL}/node/create`, {
      data: nodeXML,
      headers: {
        'Authorization': `Bearer ${token}`,
        'Content-Type': 'text/xml'
      }
    });

    expect([200, 401, 400]).toContain(response.status());
    console.log(`Edici√≥n continua dentro del changeset: c√≥digo ${response.status()}`);
  });

  // ============================================================
  // 3Ô∏è‚É£ Cierre del changeset
  // ------------------------------------------------------------
  // Cierra el changeset previamente abierto.
  // ============================================================
  test('Cerrar changeset', async ({ request }) => {
    test.skip(!changesetId, 'No se abri√≥ ning√∫n changeset previamente.');

    const response = await request.put(`${baseURL}/changeset/${changesetId}/close`, {
      headers: {
        'Authorization': `Bearer ${token}`
      }
    });

    expect([200, 401, 404]).toContain(response.status());
    console.log(`Cierre de changeset: c√≥digo ${response.status()}`);
  });

  // ============================================================
  // 4Ô∏è‚É£ Descarga del changeset cerrado
  // ------------------------------------------------------------
  // Descarga la informaci√≥n del changeset cerrado para verificar
  // que se haya almacenado correctamente.
  // ============================================================
  test('Descargar y verificar changeset cerrado', async ({ request }) => {
    test.skip(!changesetId, 'No se abri√≥ ning√∫n changeset previamente.');

    const response = await request.get(`${baseURL}/changeset/${changesetId}`, {
      headers: {
        'Authorization': `Bearer ${token}`
      }
    });

    expect([200, 401, 404]).toContain(response.status());
    console.log(`Verificaci√≥n de changeset cerrado: c√≥digo ${response.status()}`);
  });

});
